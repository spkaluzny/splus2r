
R version 2.15.2 (2012-10-26) -- "Trick or Treat"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> if(is.R()) library(splus2R)
> 
> a <- c(m=1, n=2)
> b <- diag(1:3)
> cc <- cbind(a=1:5, b=2:6, c=letters[1:5])
> d <- data.frame(cc)
> attr(d, "dup.row.names") <- TRUE
> e <- ts(1:10, frequency = 4, start = c(1959, 2))
> f <- list(a,b=b)
> setClass("track", representation(x="numeric", y="numeric"))
> g <- new("track", x=1:5, y=1:5)
> 
> showStructure(a)
numeric[ length 2]  class: numeric 
> showStructure(b)
numeric[3,3]  class: matrix 
> showStructure(cc)
character[5,3]  class: matrix 
 attributes: dimnames 
> showStructure(d)
list[5,3]  S3 class: data.frame 
 &row.names       numeric[ length 5]  class: integer 
 &dup.row.names   logical[ length 1]  class: logical 
 $a   numeric[ length 5]  S3 class: factor 
   &levels     character[ length 5]  class: character 
 $b   numeric[ length 5]  S3 class: factor 
   &levels     character[ length 5]  class: character 
 $c   numeric[ length 5]  S3 class: factor 
   &levels     character[ length 5]  class: character 
> showStructure(e)
numeric[ length 10]  S3 class: ts 
 &tsp   numeric[ length 3]  class: numeric 
> showStructure(f)
list[ length 2]  class: list 
 $1   numeric[ length 2]  class: numeric 
 $b   numeric[3,3]  class: matrix 
> showStructure(g)  # prints with @ rather than $
S4[ length 2]  S4 class: track 
 @x   numeric[ length 5]  class: integer 
 @y   numeric[ length 5]  class: integer 
> showStructure(list(a=a, b=b))
list[ length 2]  class: list 
 $a   numeric[ length 2]  class: numeric 
 $b   numeric[3,3]  class: matrix 
> showStructure(list(cc=cc, d, list(a,e)))
list[ length 3]  class: list 
 $cc   character[5,3]  class: matrix 
   attributes: dimnames 
 $2    list[5,3]  S3 class: data.frame 
   &row.names         numeric[ length 5]  class: integer 
   &dup.row.names     logical[ length 1]  class: logical 
   $a     numeric[ length 5]  S3 class: factor 
     &levels       character[ length 5]  class: character 
   $b     numeric[ length 5]  S3 class: factor 
     &levels       character[ length 5]  class: character 
   $c     numeric[ length 5]  S3 class: factor 
     &levels       character[ length 5]  class: character 
 $3    list[ length 2]  class: list 
   $1     numeric[ length 2]  class: numeric 
   $2     numeric[ length 10]  S3 class: ts 
     &tsp       numeric[ length 3]  class: numeric 
> showStructure(list(a=a, g=g))
list[ length 2]  class: list 
 $a   numeric[ length 2]  class: numeric 
 $g   S4[ length 2]  S4 class: track 
   @x     numeric[ length 5]  class: integer 
   @y     numeric[ length 5]  class: integer 
> 
> if(!is.R()){
+   g2 <- signalSeries(data.frame(x = 11:20, y = 21:30), 1:10,
+                     units = c("mm", "cm"))
+   showStructure(g2)
+ }
> 
> if(is.R()){
+   g3 <- g
+   attr(g3, "fish") <- "bonito"
+   showStructure(g3)
+ }
S4[ length 2]  S4 class: track 
 &fish   character[ length 1]  class: character 
 @x   numeric[ length 5]  class: integer 
 @y   numeric[ length 5]  class: integer 
> 
> if(is.R()){
+   # More objects, from help(typeof)
+   typeof(unclass)
+   # "builtin"
+   showStructure(unclass)
+   # function[ length 1]  class: function 
+   typeof(zapsmall)
+   # "closure"
+   showStructure(zapsmall)
+   # function[ length 1]  class: function 
+   typeof(get("while"))
+   # "special"
+   showStructure(get("while"))
+   # function[ length 1]  class: function 
+ 
+   # I am not trying the various objects that help(typeof)
+   # says are unlikely to be seen at the user level.
+ }
function[ length 1]  class: function 
function[ length 1]  class: function 
function[ length 1]  class: function 
> 
> proc.time()
   user  system elapsed 
   1.03    0.03    1.13 
